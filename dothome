#!/bin/bash
###############################################################################
#File: dothome.sh
#
#License: MIT
#
#Copyright (C) 2024 Onur Ozuduru
#
#Follow Me!
#  github: github.com/onurozuduru
###############################################################################
##############################AUTO GENERATED FILE##############################
###############################################################################
# shellcheck disable=2155

BASE_PATH="${HOME}"
DOT_DIR_NAME="dotfiles"
DOT_DIR_PATH=""
PREFIX_DOT='.'
PREFIX_NO_DOT='dot.'

print_line()
{
    echo "--------------------------------------------------------------------------------"
}

print_error_line()
{
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
}

log_error()
{
    print_error_line
    echo "$1"
    print_error_line
}

link_file()
{
    local target_path
    local link_path
    target_path="$1"
    link_path="$2"

    echo "Linking file: ${target_path}"
    if ! ln -s "${target_path}" "${link_path}"; then
        echo "Could not link file: '${link_path}'->'${target_path}'"
        exit 1
    fi
    echo "File linked: '${link_path}'->'${target_path}'"
}

new_dot_dir()
{
    if [[ -z "${DOT_DIR_NAME}" ]]; then
        echo "Name cannot be empty!"
        exit 1
    fi
    if [[ -e "${DOT_DIR_PATH}" ]]; then
        echo "Already exists: ${DOT_DIR_PATH}"
        exit 1
    fi

    echo "Creating new dot files folder..."
    mkdir "${DOT_DIR_PATH}"
    echo "Created: ${DOT_DIR_PATH}"
}

add_to_dot_dir()
{
    local file_to_add_path="$1"

    local pattern_match="\/${PREFIX_DOT}"
    local pattern_replace="/${PREFIX_NO_DOT}"

    if [[ -z "${file_to_add_path}" ]]; then
        echo "Please give file path to add!"
        exit 1
    fi
    if [[ -L "${file_to_add_path}" ]]; then
        echo "File is a link: ${file_to_add_path}"
        local link_target=$(realpath "${file_to_add_path}")
        echo "Links cannot be used as dot files, real path of the file: '${link_target}'"
        exit 1
    fi
    if [[ ! -f "${file_to_add_path}" ]]; then
        echo "File does not exist OR not a file: ${file_to_add_path}"
        exit 1
    fi
    if [[ ! -d "${DOT_DIR_PATH}" ]]; then
        echo "Dot files folder does not exist: ${DOT_DIR_PATH}"
        exit 1
    fi

    # Take relative path and do not resolve symbolic links
    local new_file_path=$(realpath -s --relative-to="${BASE_PATH}" "${file_to_add_path}")
    new_file_path="${new_file_path//${pattern_match}/${pattern_replace}}"
    if [[ "${new_file_path::1}" == '.' ]]; then
        new_file_path="${PREFIX_NO_DOT}${new_file_path#.}"
    fi
    new_file_path="${DOT_DIR_PATH}/${new_file_path}"

    if [[ -e "${new_file_path}" ]] || [[ -L "${new_file_path}" ]]; then
        echo "File already exist: ${new_file_path}"
        echo "Cannot overwrite, please remove existing file!"
        exit 1
    fi

    echo "Moving file under '${DOT_DIR_NAME}'..."
    local new_file_dir=$(dirname "${new_file_path}")
    mkdir -p "${new_file_dir}"
    if ! mv "${file_to_add_path}" "${new_file_path}"; then
        echo "Could not move the file from '${file_to_add_path}' to '${new_file_path}'"
        exit 1
    fi
    echo "File moved: ${new_file_path}"

    link_file "${new_file_path}" "${file_to_add_path}"
}

init_from_dot_dir()
{
    local pattern_match="${PREFIX_NO_DOT}"
    local pattern_replace="${PREFIX_DOT}"

    if [[ ! -d "${DOT_DIR_PATH}" ]]; then
        echo "Dot files folder does not exist: ${DOT_DIR_PATH}"
        exit 1
    fi

    local all_dot_files=$(find "${DOT_DIR_PATH}" -type f -printf '%P\n')

    for dot_file in ${all_dot_files}
    do
        print_line
        dot_file_path="${DOT_DIR_PATH}/${dot_file}"
        new_file_path="${dot_file//${pattern_match}/${pattern_replace}}"
        new_file_path="${BASE_PATH}/${new_file_path}"
        if [[ -e "${new_file_path}" ]] || [[ -L "${new_file_path}" ]]; then
            log_error "File already exist, cannot overwrite: ${new_file_path}"
            print_line
            continue
        fi
        new_file_dir=$(dirname "${new_file_path}")
        mkdir -p "${new_file_dir}"
        link_file "${dot_file_path}" "${new_file_path}"
        print_line
    done
}

declare -A MODES
MODES["-n"]="new_dot_dir"
MODES["--new"]="new_dot_dir"
MODES["-i"]="init_from_dot_dir"
MODES["--init"]="init_from_dot_dir"
MODES["-a"]="add_to_dot_dir"
MODES["--add"]="add_to_dot_dir"

MODE=""

FILE_TO_ADD=""

print_help() {
    echo "Usage: $0 [ -b | --base <DIR> ] [ -d | --dotfiles <NAME> ] [ -n | --new ] [ -i | --init ] [ -a | --add <FILE> ] [ -h | --help ]"
    echo -e "Simple dot files manager."
    echo -e "\t-b,--base <DIR>\t\tBase directory to use for operations. Default: '${HOME}'"
    echo -e "\t-d,--dotfiles <NAME>\tName of a directory relative to base directory to use for operations. Default: '${DOT_DIR_NAME}'"
    echo -e "\t-n,--new\t\tCreate new dot files directory under base directory."
    echo -e "\t-i,--init\t\tLink files from dot files directory to their relative locations under base directory."
    echo -e "\t-a,--add <FILE>\t\tMove given file to dot files directory and create link under base directory."
    echo -e "\t-h,--help\t\tDisplay help."
}

### Get params
# -l long options (--help)
# -o short options (-h)
# : options takes argument (--option1 arg1)
# $@ pass all command line parameters.
set -e
params=$(getopt -l "base:,dotfiles:,new,init,add:,help" -o "b:d:nia:h" -- "$@")

eval set -- "$params"

### Run
while true
do
    case $1 in
        -h|--help)
            print_help
            exit 0
            ;;
        -b|--base)
            shift
            BASE_PATH="$1"
            ;;
        -d|--dotfiles)
            shift
            DOT_DIR_NAME="$1"
            ;;
        -n|--new)
            MODE="${MODE}${MODES[$1]}"
            ;;
        -i|--init)
            MODE="${MODE}${MODES[$1]}"
            ;;
        -a|--add)
            MODE="${MODE}${MODES[$1]}"
            shift
            FILE_TO_ADD="$1"
            ;;
        --)
            shift
            break
            ;;
        *)
            print_help
            exit 0
            ;;
    esac
    shift
done

if [[ -z "${DOT_DIR_NAME}" ]]; then
    echo "Dot files target name cannot be empty!"
    exit 1
fi
if [[ -z "${BASE_PATH}" ]]; then
    echo "Base path cannot be empty!"
    exit 1
fi

DOT_DIR_PATH="${BASE_PATH}/${DOT_DIR_NAME}"

if [[ -z "${MODE}" ]]; then
    echo "Provide only one of the" "${!MODES[@]}"
    exit 1
fi
if [[ "${MODE}" != "${MODES[-n]}" && "${MODE}" != "${MODES[-i]}" && "${MODE}" != "${MODES[-a]}" ]]; then
    echo "Following flags cannot be used together: " "${!MODES[@]}"
    exit 1
fi

if [[ "${MODE}" == "${MODES[-a]}" ]]; then
    ${MODE} "${FILE_TO_ADD}"
else
    ${MODE}
fi

